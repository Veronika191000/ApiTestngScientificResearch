plugins {
    id 'java'
    id "io.freefair.lombok" version "6.5.1"
    id "io.qameta.allure" version "2.11.2"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.2'
    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'org.testng:testng:6.14.3'
    testImplementation 'io.rest-assured:rest-assured:4.0.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'com.jayway.restassured:rest-assured:2.9.0'
    testImplementation 'io.qameta.allure:allure-testng:2.17.3'
    testImplementation 'io.qameta.allure:allure-commandline:2.17.3'
    testImplementation 'io.qameta.allure:allure-rest-assured:2.17.3'
    testImplementation 'io.qameta.allure:allure-java-commons:2.17.3'
    testImplementation 'org.aspectj:aspectjweaver:1.9.8'
    testImplementation 'org.assertj:assertj-core:3.11.1'


    //testImplementation 'io.qameta.allure:allure-commandLine:2.17.3'
    //implementation 'org.projectlombok:lombok:1.18.16'
    // annotationProcessor 'org.projectlombok:lombok:1.18.16'
    // to generate code during the compilation process on the annotation basic we need to add dependency annotationProcessor
}

group = 'org.example'
version = '1.0-SNAPSHOT'
description = 'RestAssuredApiTesting'
java.sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(Test) {
    systemProperty 'key', System.getProperty('key')
    systemProperty 'token', System.getProperty('token')
    useTestNG()
}

def negativeTests = tasks.register("negativetests", Test).configure() {
    filter {
        includeTestsMatching("negativeTests*")
    }
    //   dependsOn("positivetests")
}

def positiveTests = tasks.register("positivetests", Test).configure() {
    filter {
        includeTestsMatching("positiveTests*")
    }
}

tasks.register("regress", Test).configure() {
    filter {
        includeTestsMatching("negativeTests*")
        includeTestsMatching("positiveTests*")
    }
    // if we need to specify the test run order
    //  tasks.getByName("negativetests").shouldRunAfter("positivetests")

    //or
    /* dependsOn("positivetests")
     dependsOn("negativetests")*/
}
